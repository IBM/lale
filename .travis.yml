dist: xenial
language: python
python:
  - "3.6"
env:
  global:
    # to break out a new category, add "$prefix" here
    # and add a line below with NOTEBOOK_CATEGORY="$prefix" TEST_CASES="test/test_notebooks.py"
    - ALL_NOTEBOOK_CATEGORIES="demo_ docs_ talk_"
  jobs:
    - SETUP_TARGET=.[test] TEST_CASES="test/test_core_operators.py" 
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_core_operators_classifiers.py" 
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_core_operators_regressors.py" 
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_core_pipeline.py test/test_custom_schemas.py test/test_json_pretty_viz.py test/test_grammar.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_type_checking.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_interoperability.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_optimizers.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_pipeline.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_autoai_libs.py"
    - SETUP_TARGET=.[full,test] NOTEBOOK_CATEGORY="demo_" TEST_CASES="test/test_notebooks.py"
    - SETUP_TARGET=.[full,test] NOTEBOOK_CATEGORY="docs_" TEST_CASES="test/test_notebooks.py"
    - SETUP_TARGET=.[full,test] NOTEBOOK_CATEGORY="talk_" TEST_CASES="test/test_notebooks.py"
    - SETUP_TARGET=.[full,test] TEST_CASES="test/test_notebooks.py"
    - SETUP_TARGET=.[test] TEST_CASES="test/test_autoai_output_consumption.py"
    - SETUP_TARGET=.[test] TEST_CASES="test/test_autogen_lib.py"
    - SETUP_TARGET=.[test] TEST_CASES="test/test_snap_ml.py"
addons:
  apt:
    packages:
    - graphviz
    - swig
before_install:
  - pip install -U numpy
install:
  - |
    if [ "z${TEST_CASES}" == z"test/test_snap_ml.py" ]; then
      echo -e "${ANSI_GREEN}Installing SnapML...${ANSI_RESET}" && echo -en 'travis_fold:start:compile\\r'
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
      bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
      source "$HOME/miniconda/etc/profile.d/conda.sh"
      hash -r
      conda config --set always_yes yes --set changeps1 no
      conda update -q conda
      conda info -a
      conda config --prepend channels https://public.dhe.ibm.com/ibmdl/export/pub/software/server/ibm-ai/conda/
      conda create -q --name conda-snapml-env python="3.6"
      conda activate conda-snapml-env
      export IBM_POWERAI_LICENSE_ACCEPT=yes
      conda install pai4sk
    fi
  - pip install $SETUP_TARGET
  - export PYTHONPATH=`pwd`
script:
    - echo -e "${ANSI_GREEN}Running Tests...${ANSI_RESET}" && echo -en 'travis_fold:start:tests\\r'
    - travis_wait 60 py.test -v --cov-report=xml --cov=lale $TEST_CASES
    - bash <(curl -s https://codecov.io/bash)
    - echo -en 'travis_fold:end:tests\\r'
stages:
  - static_tests
  - test
  - deploy
jobs:
  include:
    - stage: static_tests
      script:
        - echo -e "${ANSI_GREEN}Compiling all...${ANSI_RESET}" && echo -en 'travis_fold:start:compile\\r'
        - python -m compileall .
        - echo -en 'travis_fold:end:compile\\r'
        - echo -e "${ANSI_GREEN}Running flake8...${ANSI_RESET}" && echo -en 'travis_fold:start:flake8\\r'
        - flake8 . --count --select=E9,F63,F72,F82 --show-source --statistics
        - echo -en 'travis_fold:end:flake8\\r'
        - echo -e "${ANSI_GREEN}Running mypy...${ANSI_RESET}" && echo -en 'travis_fold:start:mypy\\r'
        - mypy -p lale
        - echo -en 'travis_fold:end:mypy\\r'
      env: SETUP_TARGET=.[test]
    - stage: deploy
      install: skip
      script: skip
      env: SETUP_TARGET=.[test]
      deploy:
          provider: pypi
          server: https://test.pypi.org/legacy/
          user: __token__
          password: $PYPI_TOKEN
          skip_existing: true
          on:
              fork: false
